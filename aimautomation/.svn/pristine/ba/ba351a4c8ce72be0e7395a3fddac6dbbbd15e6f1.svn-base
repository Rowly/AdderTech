'''
Created on 28 Jun 2013

@author: Mark.rowlands
'''
from root.nested.tests.base_aim_regression_test import BaseAimRegressionTest

class  AimUserConfigPageFunctionsTest(BaseAimRegressionTest):

    def test_can_change_user_username(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_username(users[-1])
        self._page.click_user_config(users[-1])
        new_name = username + " edit"
        self._page.set_user_username_via_config_page(new_name)
        self._page.click_save()
        self._page.confirm_no_longer_on_user_config_page()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_username(users[-1]), new_name)
        self._page.click_user_config(users[-1])
        self._page.set_user_username_via_config_page(username)
        self._page.click_save()
     
    def test_can_change_user_firstname(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_firstname(users[-1])
        self._page.click_user_config(users[-1])
        new_name = username + " edit"
        self._page.set_user_firstname_via_config_page(new_name)
        self._page.click_save()
        self._page.confirm_no_longer_on_user_config_page()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_firstname(users[-1]), new_name)
        self._page.click_user_config(users[-1])
        self._page.set_user_firstname_via_config_page(username)
        self._page.click_save()
 
    def test_can_change_user_lastname(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_lastname(users[-1])
        self._page.click_user_config(users[-1])
        new_name = username + " edit"
        self._page.set_user_lastname_via_config_page(new_name)
        self._page.click_save()
        self._page.confirm_no_longer_on_user_config_page()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_lastname(users[-1]), new_name)
        self._page.click_user_config(users[-1])
        self._page.set_user_lastname_via_config_page(username)
        self._page.click_save()
 
    def test_can_change_user_email(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        email = self._page.get_user_email_from_config_page()
        new_email = "edit" + email
        self._page.set_user_email_via_config_page(new_email)
        self._page.click_save()
        self._page.confirm_no_longer_on_user_config_page()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertEqual(self._page.get_user_email_from_config_page(), new_email)
        self._page.set_user_email_via_config_page(email)
        self._page.click_save()
 
    def test_cannot_change_user_email_to_invalid_address(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        new_email = "edit"
        self._page.set_user_email_via_config_page(new_email)
        self._page.click_save_ignore_warnings()
        self.assertTrue(self._page.is_ajax_error_message_displayed_for_user())
         
    def test_can_change_user_password(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_username(users[-1])
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_require_password_for_user_state("keep"))
        self._page.select_user_change_password()
        self._page.set_user_password_via_config_page("password2")
        self._page.set_user_password2_via_config_page("password2")
        self._page.select_aim_admin_yes()
        self._page.click_save()
        self._page.ensure_logged_out()
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as(username, "password2", False)
        self.assertTrue(self._page.get_located_dashboard_link())
        self._page.ensure_logged_out()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.select_user_change_password()
        self._page.set_user_password_via_config_page("password")
        self._page.set_user_password2_via_config_page("password")
        self._page.select_aim_admin_no()
        self._page.click_save()
  
    def test_warning_given_if_passwords_not_matching(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.select_user_change_password()
        self._page.set_user_password_via_config_page("passwordtest")
        self._page.set_user_password2_via_config_page("testpassword")
        self._page.select_aim_admin_yes()
        self._page.click_save_ignore_warnings()
        self.assertTrue(self._page.is_ajax_error_message_displayed_for_user())
      
    def test_can_change_to_no_password_required_for_login(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_username(users[-1])
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_require_password_for_user_state("keep"))
        self._page.select_user_no_password()
        self._page.select_aim_admin_yes()
        self._page.click_save()
        self._page.ensure_logged_out()
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as(username, "", False)
        self.assertTrue(self._page.get_located_dashboard_link())
        self._page.ensure_logged_out()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        password = "password"
        self._page.click_user_config(users[-1])
        self._page.select_user_change_password()
        self._page.set_user_password_via_config_page(password)
        self._page.set_user_password2_via_config_page(password)
        self._page.select_aim_admin_no()
        self._page.click_save()
  
    def test_can_change_aim_admin_access(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_username(users[-1])
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_aim_admin_for_user_state("no"))
        self._page.select_aim_admin_yes()
        self._page.click_save()
        self._page.ensure_logged_out()
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as(username, "password", False)
        self.assertTrue(self._page.get_located_dashboard_link())
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_aim_admin_for_user_state("yes"))
        self._page.select_aim_admin_no()
        self._page.click_save()
     
    def test_can_change_user_to_suspended(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        username = self._page.get_user_username(users[-1])
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_suspended_for_user_state("no"), True)
        self._page.select_user_suspended_yes()
        self._page.select_aim_admin_yes()
        self._page.click_save()
        self._page.ensure_logged_out()
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as(username, "password", False)
        self.assertFalse(self._page.get_located_dashboard_link())
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_suspended_for_user_state("yes"), True)
        self._page.select_aim_admin_no()
        self._page.select_user_suspended_no()
        self._page.click_save()
       
    def test_can_change_user_exclusive_connection_status_to_no(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("inherit"))
        self._page.select_user_exclusive_no()
        self._page.click_save()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_connection_image_src(users[-1]), self._baseurl + "/admin/images/silk_icons/cross.png")
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("no"))
        self._page.select_user_exclusive_global()
        self._page.click_save()
  
    def test_can_change_user_exclusive_connection_status_to_global(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("inherit"))
        self._page.select_user_exclusive_global()
        self._page.click_save()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_connection_image_src(users[-1]), self._baseurl + "/admin/images/silk_icons/inherit.png")
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("inherit"))
        self._page.select_user_exclusive_global()
        self._page.click_save()
  
    def test_can_change_user_exclusive_connection_status_to_yes(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("inherit"))
        self._page.select_user_exclusive_yes()
        self._page.click_save()
        users = self._page.get_list_of_users()
        self.assertEqual(self._page.get_user_connection_image_src(users[-1]), self._baseurl + "/admin/images/silk_icons/tick.png")
        self._page.click_user_config(users[-1])
        self.assertTrue(self._page.get_user_exclusive_for_user_state("yes"))
        self._page.select_user_exclusive_global()
        self._page.click_save()
      
    def test_can_change_user_group_membership_of_user(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(len(self._page.get_all_user_groups_for_user()) == 0)
        self._page.add_user_to_usergroup_via_user_config_page("group 0")
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue("group 0" in self._page.get_all_user_groups_for_user())
        self._page.remove_all_user_groups_from_user_via_user_config_page()
        self._page.click_save()
      
    def test_can_change_channel_permissions_of_user(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(len(self._page.get_all_channel_permissions_for_user()) == 0)
        self._page.add_channel_permission_to_user_via_user_config_page(self._channel_names[0])
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(self._channel_names[0] in self._page.get_all_channel_permissions_for_user())
        self._page.remove_all_channels_from_user()
        self._page.click_save()
  
    def test_can_change_channel_group_permissions_of_user(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue(len(self._page.get_all_channel_groups_for_channel()) == 0)
        self._page.add_channel_group_permission_to_user_via_user_config_page("group 0")
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self.assertTrue("group 0" in self._page.get_all_channel_groups_for_channel())
        self.assertTrue(self._page.get_all_channel_groups_for_channel())
        self._page.remove_all_channel_group_permissions_via_user_config_page()
        self._page.click_save()
          
    def test_can_change_receiver_permissions(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.show_receiver_permissions()
        self.assertEqual(set(self._rx_names), set(self._page.get_all_receivers_for_user()))
        self._page.remove_all_receiver_permissions_from_user()
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.show_receiver_permissions()
        self.assertTrue(len(self._page.get_all_receivers_for_user()) == 0)
        self._page.add_receiver_permission_to_user_via_user_config_page("RX2")
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.show_receiver_permissions()
        self.assertTrue("RX2" in self._page.get_all_receivers_for_user())
        self._page.add_all_receiver_permissions_via_user_config_page()
        self._page.click_save()
      
    def test_can_change_receiver_group_permissions(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_users_tab()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.show_receiver_permissions()
        self.assertTrue(len(self._page.get_all_rx_groups_for_user()) == 0)
        self._page.add_receiver_group_permission_to_user_via_user_config_page("group 0")
        self._page.click_save()
        users = self._page.get_list_of_users()
        self._page.click_user_config(users[-1])
        self._page.show_receiver_permissions()
        self.assertTrue("group 0" in self._page.get_all_rx_groups_for_user())
        self._page.remove_all_receiver_group_permissions_via_user_config_page()
        self._page.click_save()