'''
Created on 4 Jun 2013

@author: Mark.rowlands
'''
from root.nested.tests.base_aim_regression_test import BaseAimRegressionTest

class AimAddChannelPageFunctionsTest(BaseAimRegressionTest):
    
    def test_cannot_create_channel_without_a_name(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        self._page.click_add_channel_button()
        self.assertEqual(self._page.get_text_of_page_header(), "Channels > Add Channel")
        self.assertFalse(self._page.is_ajax_error_message_displayed_for_channel())
        self._page.click_save_ignore_warnings()
        self.assertTrue(self._page.is_ajax_error_message_displayed_for_channel())
        
    def test_can_create_channel(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/inherit.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()
        
    def test_can_create_channel_with_view_only_connection(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.set_channel_connections_to_view_only()
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/eye.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_create_channel_with_view_shared_only_connection(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.set_channel_connections_to_view_shared_only()
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/eye.png")
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[1], self._baseurl + "/admin/images/silk_icons/multicast.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_create_channel_with_shared_only_connection(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.set_channel_connections_to_shared_only()
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/multicast.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_create_channel_with_exclusive_only_connection(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.set_channel_connections_to_exclusive_only()
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/lock.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_create_channel_with_view_shared_and_exclusive_connection(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.set_channel_connections_to_view_shared_and_exclusive()
        self._page.add_user_to_channel_permission("admin")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/eye.png")
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[1], self._baseurl + "/admin/images/silk_icons/multicast.png")
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[2], self._baseurl + "/admin/images/silk_icons/lock.png")
        self._page.click_channel_delete(new_channels[-1])
        self._page.click_lightbox_delete_button()
    
    def test_can_create_channel_with_channel_group(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.add_channel_to_group("group 0")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/inherit.png")
        link_text = self._page.get_channel_config_linktext(new_channels[-1])
        self._page.driver.get(link_text)
        self.assertTrue("group 0" in self._page.get_all_channel_groups_for_channel())
        self._page.open_channels_tab()
        final_channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(final_channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_create_channel_with_user_group(self):
        name = "New Name"
        desc = "New Desc"
        loc = "New Loc"
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_add_channel_button()
        self._page.set_channel_name_via_config_page(name)
        self._page.set_channel_description_via_config_page(desc)
        self._page.set_channel_location_via_config_page(loc)
        self._page.set_channel_video_source(1)
        self._page.set_channel_audio_source(1)
        self._page.set_channel_usb_source(1)
        self._page.set_channel_serial_source(1)
        self._page.add_channel_to_user_group("group 0")
        self._page.click_save()
        new_channels = self._page.get_list_of_channels()
        self.assertTrue(len(new_channels) > len(channels))
        self.assertEqual(self._page.get_channel_name(new_channels[-1]), name)
        self.assertEqual(self._page.get_channel_description(new_channels[-1]), desc)
        self.assertEqual(self._page.get_channel_location(new_channels[-1]), loc)
        self.assertEqual(self._page.get_channel_connection_img_src(new_channels[-1])[0], self._baseurl + "/admin/images/silk_icons/inherit.png")
        link_text = self._page.get_channel_config_linktext(new_channels[-1])
        self._page.driver.get(link_text)
        self.assertTrue("group 0" in self._page.get_all_user_groups_for_channel())
        self._page.open_channels_tab()
        final_channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(final_channels[-1])
        self._page.click_lightbox_delete_button()