'''
Created on 30 May 2013

@author: Mark.rowlands
'''
from root.nested.tests.base_aim_regression_test import BaseAimRegressionTest

class AimChannelClonePageFunctionsTest(BaseAimRegressionTest):
    '''
    classdocs
    '''

    def test_can_clone_existing_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self.assertEqual(self._page.get_channel_name(channels[-1])[-6:], "(Copy)")
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()
    
    def test_can_cancel_clone_existing_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.click_cancel()
        self._page.confirm_no_longer_on_clone_channel_page()
        new_channels = self._page.get_list_of_channels()
        self.assertEqual(len(channels), len(new_channels))
        
    def test_can_change_name_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_name_via_config_page("new clone")
        description = self._page.get_channel_description_from_config_page()
        location = self._page.get_channel_location_from_config_page()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self.assertEqual(self._page.get_channel_name(channels[-1]), "new clone")
        self.assertEqual(self._page.get_channel_description(channels[-1]), description)
        self.assertEqual(self._page.get_channel_location(channels[-1]), location)
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_description_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_description_via_config_page("new clone")
        location = self._page.get_channel_location_from_config_page()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self.assertEqual(self._page.get_channel_name(channels[-1])[-6:], "(Copy)")
        self.assertEqual(self._page.get_channel_description(channels[-1]), "new clone")
        self.assertEqual(self._page.get_channel_location(channels[-1]), location)
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_location_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_location_via_config_page("new clone")
        description = self._page.get_channel_description_from_config_page()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self.assertEqual(self._page.get_channel_name(channels[-1])[-6:], "(Copy)")
        self.assertEqual(self._page.get_channel_description(channels[-1]), description)
        self.assertEqual(self._page.get_channel_location(channels[-1]), "new clone")
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_video_source_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_video_source(1)
        check = self._page.get_selected_video_source()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.is_channel_video_source(check))
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_audio_source_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_audio_source(1)
        check = self._page.get_selected_audio_source()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.is_channel_audio_source(check))
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_usb_source_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_usb_source(1)
        check = self._page.get_selected_usb_source()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.is_channel_usb_source(check))
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_serial_source_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_serial_source(1)
        check = self._page.get_selected_serial_source()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.is_channel_serial_source(check))
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()
    
    def test_can_change_allowed_connections_of_cloned_channel_to_view_only(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_connections_to_view_only()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.get_channel_connections_to_view_only_selected())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_allowed_connections_of_cloned_channel_to_view_shared_only(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_connections_to_view_shared_only()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.get_channel_connections_to_view_shared_only_selected())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_allowed_connections_of_cloned_channel_to_exclusive_only(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_connections_to_exclusive_only()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.get_channel_connections_to_exclusive_only_selected())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_allowed_connections_of_cloned_channel_to_view_shared_and_exclusive(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.set_channel_connections_to_view_shared_and_exclusive()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.get_channel_connections_to_view_shared_and_exclusive_selected())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()
    
    def test_can_change_user_permissions_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.add_user_to_channel_permission("user 0")
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.check_user_has_channel_permission("user 0"))
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_channel_group_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.add_channel_to_group()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.check_channel_in_channel_group())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()

    def test_can_change_user_group_of_cloned_channel(self):
        self._page.open_AIM_homepage_on_base_url()
        self._page.login_as("admin", "password", False)
        self._page.open_channels_tab()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_clone(channels[-1])
        self._page.add_channel_to_user_group()
        self._page.click_save()
        self._page.confirm_no_longer_on_clone_channel_page()
        channels = self._page.get_list_of_channels()
        self._page.click_configure_channel(channels[-1])
        self.assertTrue(self._page.check_channel_in_user_group())
        self._page.click_cancel()
        channels = self._page.get_list_of_channels()
        self._page.click_channel_delete(channels[-1])
        self._page.click_lightbox_delete_button()